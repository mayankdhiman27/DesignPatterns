-> YAGNI: Avoid doing work until you know it is deemed necessary.

-> Cohesion: Like things be together, and unlike things apart.

-> Coupling: 
	=>The degree of connectivity of things. It means what you depend on. A worst form of coupling is "Inheritance" as it 	increases coupling quite a bit atleast. 
	=> Try to see if you can remove coupling.
	=> Wherever there is coupling, it becomes tough to change the code over time and requirement.
	=> Also, keep in mind you cannot remove all the dependencies. Because it becomes so stable tha it won't even run :).
	=> You can make it loose, means loose coupling.
	=> Depending on a Class is tight coupling.
	=> Depending on an Interface is loose coupling.
	=> A good design has high cohesion and low coupling.

-> DRY: Don't repeat yourself
	=> Don't duplicate code and effort.
	=> Every piece of knowledge in a system should have single unambiguous authoritative representation.
	=> It reduces the cost of development.
	=> Tools you can used to detect copied code: CPD(Copy Paste Detector), Semien.
	=> Try not to create abstraction.
	=> 

-> Focus on Single Responsibility:
	=> SLAP: Single Level of Abstraction Principle.
	=> Single level of abstraction.
	=> Don't comment What, instead why.
	=> Compose Method Pattern: The code should tell how you have done it. Means, the code should be self documented (no comments needed).

-> OCP(Open Closed Principle):
	=> Software modules should be open for extension but closed from modification.
	=> Abstraction and Polymorphism are the key to make this happen.
	=> This can be achieved using low coupling.
	=> A class can not be Oveinfinitely extensible.
	=> Overuse Inheritance.
	=> Inheritance should be only used for sustainability.

-> Liskov Substitution Principle:
	=> Inheritance should be used only when your intension is to substitute an object of class where another object is needed. For ex.: If an object of B should be used anywhere an object of A is used, then use inheritance.
	=> If an object of B should use an object of A, then use Delegation/ Composition.
	=> Inheritance demands more from a developer than composition or delegation does. For ex.: Services of the derived class should require no more and promise no less than the corresponding services of the base class, for example:
	class Engine{
		....
		....
		public String toString(){
			....
		}
	}

	class TurboEngine extends Engine{
		....
		....
		protected String toString(){
			....
			....
		}

	}

	In the above two classes, derived class has toString as protected, but in base it is protected. So, it is promising less. This shouldn't happen.
	You cannot even throw any exception which hasn't been thrown by base class.
	Collection of derived does not extend from collection of base.

	class Book{}

	class TechBook{}

	public class Sol{

		public static void process(List<Book> books){
			...
		}

		psvm(String args[]){
			List<Book> books = new List<>();
			process(books);

			List<Techbook> books_tech = new List<>();

			// below code will give you compilation error, because Collection of derived does not extend from collection // of base.
			process(books_tech);
		}
	}

	This is because, the user of a base class should be able to use an instance of a derived class without knowing the difference.
	=> Don't try to bring inheritance where it doesn't really belong in place.
	=> Use composition and delegation instead of inheritance unless you want sustainability.
	=> Use Inheritance only when you can guarantee that user of a base class can use an object of our derived class without ever knowing the difference, else don't use inheritance.

-> Dependency Inversion Principle:
	=> A class should not depend on another class, they both have to depend on an abstraction (interface).
	=> 

-> Interface Segregation Principle:
	=> A principle that you can use to make your interface cohesive, narrow, focussed and do one thing and one thing well.

	-> SRP
	-> OCP
	-> LSP
	-> ISP
	-> DIP
	-------
	Above all we must have in mind the below two also:
	-> DRY
	-> YAGNI

